# Available variables:
#  - env: environment on which the action is triggered
#  - model: model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: utility function to compare floats based on specific precision
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - _logger: _logger.info(message): logger to emit messages in server logs
#  - UserError: exception class for raising user-facing warning messages
#  - Command: x2many commands namespace
# To return an action, assign: action = {...}

# Server action to reconcile selected records (users) with their LDAP attributes

# Iterate through selected records
for user in records:
    if not user.ldap_dn:
        continue

    # Get LDAP configuration for the user
    ldap_config = user.ldap_config_id
    if not ldap_config:
        continue

    # Connect to LDAP using the user's ldap_config_id
    conn = ldap_config.ldap_connect()
    if not conn:
        continue

    # Search for the user in LDAP using their DN
    error_f=''
    try:
        found = conn.search(search_base=user.ldap_dn, search_filter='(objectClass=*)', attributes=['*'])
    except Exception as e:
        found = False
        error_f=f"Error in finding user {e}"

    if not found:
        user.write({
            'custom_1': {"error": f"User not found in LDAP. DN: {user.ldap_dn}"},
            'custom_2': 'failed'
        })
        conn.unbind()
        continue

    ldap_entry = conn.entries[0]
    ldap_attributes = {attr: ldap_entry[attr].value for attr in ldap_entry.entry_attributes}

    # Map LDAP attributes to Enigma fields
    mapped_values = ldap_config._map_ldap_attributes(ldap_attributes, include_always=True)

    discrepancies = []
    # Retrieve deactivation attribute from LDAP
    deactivate_attribute_value = 'False'
    if ldap_config.deactivate_attribute in ldap_attributes:
        deactivate_attribute_value = str(ldap_attributes.get(ldap_config.deactivate_attribute)).upper()

    enigma_value = str(user.active).upper()  # Convert to uppercase for case-insensitive comparison

    # Compare values
    if deactivate_attribute_value == enigma_value:
        discrepancies.append({
            "field": "active",
            "reason":"When user in MMT is active (True) then, login disabled should False and viceversa.",
            "enigma_value": enigma_value,
            "ldap_value": deactivate_attribute_value,
        })
    for field, mapped_value in mapped_values.items():
        if field in ("ldap_value","company_ids"):
            continue
        if field == "category_id":
            # Special handling for One2many relational field `category_id`
            enigma_category_dns = [cat.ldap_dn for cat in user.category_id if cat.ldap_dn]
            ldap_category_dns = [
                ldap_config.env["res.partner.category"].browse(cat_id).ldap_dn
                for cat_id in (mapped_value[0][2] if mapped_value else [])
            ]
            if set(enigma_category_dns) != set(ldap_category_dns):
                discrepancies.append({
                    "field": field,
                    "enigma_value": enigma_category_dns,
                    "ldap_value": ldap_category_dns,
                })
        else:
            # Simple field comparison
            try:
                enigma_value=user[field]
                if isinstance(enigma_value, list):  # Convert list to set for better comparison
                    enigma_value = set(enigma_value)
                if enigma_value != mapped_value:
                    discrepancies.append({
                        "field": field,
                        "enigma_value": enigma_value,
                        "ldap_value": mapped_value,
                    })
            except Exception as e:
                discrepancies.append({
                        "field": field,
                        "enigma_value": "falied",
                        "ldap_value": mapped_value,
                    })

    if discrepancies:
        # Write discrepancies to custom_1 and mark custom_2 as 'failed'
        user.write({
            'custom_1': discrepancies,
            'custom_2': 'failed'
        })
    else:
        # Mark custom_2 as 'success' if no discrepancies
        user.write({
            'custom_1': False,  # Clear custom_1 as there are no discrepancies
            'custom_2': 'success'
        })

    conn.unbind()

action = {
    "type": "ir.actions.client",
    "tag": "display_notification",
    "params": {
        "title": "Reconciliation Completed",
        "message": "Reconciliation process completed. Check logs and user records for details.",
        "sticky": False,
    },
}