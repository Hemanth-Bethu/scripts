# Available variables:
#  - env: environment on which the action is triggered
#  - model: model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: utility function to compare floats based on specific precision
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - _logger: _logger.info(message): logger to emit messages in server logs
#  - UserError: exception class for raising user-facing warning messages
#  - Command: x2many commands namespace
# To return an action, assign: action = {...}

# Server action to reconcile selected records (users) with their LDAP attributes

edited_users = []  # Store users whose login details were edited

# Iterate through selected records
for user in records:
    if not user.ldap_dn:
        continue

    # Get LDAP configuration for the user
    ldap_config = user.ldap_config_id
    if not ldap_config:
        continue

    # Connect to LDAP using the user's ldap_config_id
    conn = ldap_config.ldap_connect()
    if not conn:
        continue

    try:
        found = conn.search(search_base=user.ldap_dn, search_filter='(objectClass=*)', attributes=['*'])
    except Exception as e:
        found = False

    if not found:
        # If user is not found in LDAP, update user_source and remove ldap_dn
        user.write({
            'user_source': 'enigma',
            'ldap_dn': False
        })

        # Archive the linked contact (res.partner) if exists
        if user.partner_id:
            user.partner_id.write({'active': False})
        user.write({'active': False})
        # Add user login to the list of edited users
        edited_users.append(user.login)

        conn.unbind()
        continue

# Construct message with edited user logins
if edited_users:
    message = f"The reconciliation process has finished. The following users were updated and their linked contacts archived:\n\n" + "\n".join(edited_users)
else:
    message = "The reconciliation process has finished. No users were updated."

# Return notification action
action = {
    "type": "ir.actions.client",
    "tag": "display_notification",
    "params": {
        "title": "User Reconciliation Completed",
        "message": message,
        "sticky": False,
    },
}
